<div id="docs-content">
<!-- ============================== class title ============================ -->
	<h1 class="classTitle">
		
		Class pulse.Scene
	</h1>

<!-- ============================== class summary ========================== -->
	<p class="description">
		
		Extends
			<a href="../symbols/pulse.Node">pulse.Node</a>.<br />
		

		scene class

		
			<br /><span class="em">Defined in: </span> <a href="https://github.com/onmodulus/pulse/blob/master/lib/pulse/src/scene.js">/src/scene.js</a>
		
	</p>

<!-- ============================== constructor summary ==================== -->
	
	<table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class pulse.Scene.">
		<caption>Class Summary</caption>
		<thead>
			<tr>
				<th scope="col">Constructor Attributes</th>
				<th scope="col">Constructor Name and Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td class="attributes">&nbsp;</td>
				<td class="nameDescription" >
					<div class="fixedFont">
						<b><a href="../symbols/pulse.Scene#constructor">pulse.Scene</a></b>(params)
					</div>
					<div class="description">copyright 2012 Modulus

Scenes are collections of layers that the basis of all
things visual in the engine.</div>
				</td>
			</tr>
		</tbody>
	</table>
	

<!-- ============================== properties summary ===================== -->
	
		
		
		<table class="summaryTable" cellspacing="0" summary="A summary of the fields documented in the class pulse.Scene.">
			<caption>Field Summary</caption>
			<thead>
				<tr>
					<th scope="col">Field Attributes</th>
					<th scope="col">Field Name and Description</th>
				</tr>
			</thead>
			<tbody>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Scene#active">active</a></b>
						</div>
						<div class="description">Whether this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Scene#container">container</a></b>
						</div>
						<div class="description">HTML element container for this scene, will hold the canvas element.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Scene#events">events</a></b>
						</div>
						<div class="description">The event manager for this scene, handles all events.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Scene#layers">layers</a></b>
						</div>
						<div class="description">Associative array (object) of the layers for this scene.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont">
						<b><a href="../symbols/pulse.Scene#sceneId">sceneId</a></b>
						</div>
						<div class="description">Generates a Unique scene Id</div>
					</td>
				</tr>
			
			</tbody>
		</table>
		

		
		<dl class="inheritsList">
		<dt>Fields borrowed from class <a href="../symbols/pulse.Node">pulse.Node</a>: </dt><dd><a href="../symbols/pulse.Node#name">name</a>, <a href="../symbols/pulse.Node#parent">parent</a></dd>
		</dl>
		
	

<!-- ============================== methods summary ======================== -->
	
		
		
		<table class="summaryTable" cellspacing="0" summary="A summary of the methods documented in the class pulse.Scene.">
			<caption>Method Summary</caption>
			<thead>
				<tr>
					<th scope="col">Method Attributes</th>
					<th scope="col">Method Name and Description</th>
				</tr>
			</thead>
			<tbody>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#addLayer">addLayer</a></b>(layer, zindex)
						</div>
						<div class="description">Adds a new layer to this scene.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#draw">draw</a></b>()
						</div>
						<div class="description">Draws any layers that are live and have been updated.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#eventsCallback">eventsCallback</a></b>(type, evt)
						</div>
						<div class="description">Handles all events sent to this scene.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#getLayer">getLayer</a></b>(name)
						</div>
						<div class="description">Gets a layer from this scene by name.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#getLiveLayer">getLiveLayer</a></b>(name)
						</div>
						<div class="description">Gets a live canvas for a layer in this scene.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#getSceneContainer">getSceneContainer</a></b>()
						</div>
						<div class="description">Gets the container for this scene, a DOM div element.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#on">on</a></b>(type, callback)
						</div>
						<div class="description">Convenience function that will bind a callback to an event type.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#removeLayer">removeLayer</a></b>(name)
						</div>
						<div class="description">Removes a layer from this scene by name.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#setDefaultSize">setDefaultSize</a></b>(width, height)
						</div>
						<div class="description">Changes the default size of the scene.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#update">update</a></b>(elapsed)
						</div>
						<div class="description">Updates the layers.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#updateLiveLayers">updateLiveLayers</a></b>()
						</div>
						<div class="description">Updates the scene's container with correctly ordered live canvases.</div>
					</td>
				</tr>
			
			</tbody>
		</table>
		

		
		<dl class="inheritsList">
		
		</dl>
		
	
<!-- ============================== events summary ======================== -->
	
		
		
		<table class="summaryTable" cellspacing="0" summary="A summary of the events documented in the class pulse.Scene.">
			<caption>Event Summary</caption>
			<thead>
				<tr>
					<th scope="col">Event Attributes</th>
					<th scope="col">Event Name and Description</th>
				</tr>
			</thead>
			<tbody>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:click">click</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse button is clicked while this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:keydown">keydown</a></b>(evt)
						</div>
						<div class="description">Event rose when a key is pushed down while this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:keypress">keypress</a></b>(evt)
						</div>
						<div class="description">Event rose when a key is pressed while this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:keyup">keyup</a></b>(evt)
						</div>
						<div class="description">Event rose when a key is released while this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:mousedown">mousedown</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse button is pressed down while this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:mousemove">mousemove</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse is moved while this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:mouseup">mouseup</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse button is released while this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:mousewheel">mousewheel</a></b>(evt)
						</div>
						<div class="description">Event rose when mouse wheel is scrolled while this scene is active.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:touchend">touchend</a></b>(evt)
						</div>
						<div class="description">Event rose when the user releases their touch on the node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:touchmove">touchmove</a></b>(evt)
						</div>
						<div class="description">Event rose when the user scrolls while tapping on the node.</div>
					</td>
				</tr>
			
				<tr>
					<td class="attributes">&nbsp;</td>
					<td class="nameDescription">
						<div class="fixedFont"><b><a href="../symbols/pulse.Scene#event:touchstart">touchstart</a></b>(evt)
						</div>
						<div class="description">Event rose when the user presses down on the node.</div>
					</td>
				</tr>
			
			</tbody>
		</table>
		

		
		<dl class="inheritsList">
		
		</dl>
		
	

<!-- ============================== constructor details ==================== -->
	
	<div class="details"><a name="constructor"> </a>
		<div class="sectionTitle">
			Class Detail
		</div>

		<div class="fixedFont">
				<b>pulse.Scene</b>(params)
		</div>

		<div class="description">
			copyright 2012 Modulus

Scenes are collections of layers that the basis of all
things visual in the engine.
		</div>

		


			
				<dl class="detailList">
				<dt class="heading">Parameters:</dt>
				
					<dt>
						<span class="light fixedFont">{object}</span>  <b>params</b>
						<i>Optional</i>
					</dt>
						<dd>parameters that can be set as initialized options
on the node</dd>
				
					<dt>
						<span class="light fixedFont">{string}</span>  <b>params.name</b>
						<i>Optional</i>
					</dt>
						<dd>name of the node</dd>
				
				</dl>
			
			
			
			
			
			
			

	</div>
	

<!-- ============================== field details ========================== -->
	
		<div class="sectionTitle">
			Field Detail
		</div>
		
			<a name="active"> </a>
			<div class="fixedFont">

			
			<b>active</b>

			</div>
			<div class="description">
				Whether this scene is active.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="container"> </a>
			<div class="fixedFont">

			
			<b>container</b>

			</div>
			<div class="description">
				HTML element container for this scene, will hold the canvas element.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="events"> </a>
			<div class="fixedFont">

			
			<b>events</b>

			</div>
			<div class="description">
				The event manager for this scene, handles all events.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="layers"> </a>
			<div class="fixedFont">

			
			<b>layers</b>

			</div>
			<div class="description">
				Associative array (object) of the layers for this scene.
			</div>

			

				
				
				
				

			<hr />
		
			<a name="sceneId"> </a>
			<div class="fixedFont">

			
			<b>sceneId</b>

			</div>
			<div class="description">
				Generates a Unique scene Id
			</div>

			

				
				
				
				

			
		
	

<!-- ============================== method details ========================= -->
	
		<div class="sectionTitle">
			Method Detail
		</div>
		
			<a name="addLayer"> </a>
			<div class="fixedFont">

			
			<b>addLayer</b>(layer, zindex)

			</div>
			<div class="description">
				Adds a new layer to this scene.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.Layer">pulse.Layer</a>}</span> <b>layer</b>
							
						</dt>
						<dd>to add</dd>
					
						<dt>
							<span class="light fixedFont">{number}</span> <b>zindex</b>
							
						</dt>
						<dd>the zindex of the new layer</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="draw"> </a>
			<div class="fixedFont">

			
			<b>draw</b>()

			</div>
			<div class="description">
				Draws any layers that are live and have been updated.
			</div>

			

				
				
				
				
				
				
				

			<hr />
		
			<a name="eventsCallback"> </a>
			<div class="fixedFont">

			
			<b>eventsCallback</b>(type, evt)

			</div>
			<div class="description">
				Handles all events sent to this scene. It will check to see if any of the
events occur inside of one of it's layers and if so then passes the event
to that layer.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{string}</span> <b>type</b>
							
						</dt>
						<dd>the type of event raised</dd>
					
						<dt>
							<span class="light fixedFont">{object}</span> <b>evt</b>
							
						</dt>
						<dd>the event object with properties on the event</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="getLayer"> </a>
			<div class="fixedFont">

			
			<b>getLayer</b>(name)

			</div>
			<div class="description">
				Gets a layer from this scene by name.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{string}</span> <b>name</b>
							
						</dt>
						<dd>the name of the layer to get</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="getLiveLayer"> </a>
			<div class="fixedFont">

			
			<b>getLiveLayer</b>(name)

			</div>
			<div class="description">
				Gets a live canvas for a layer in this scene.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{string}</span> <b>name</b>
							
						</dt>
						<dd>the name of the layer</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="getSceneContainer"> </a>
			<div class="fixedFont">

			<span class="light">{DOMElement}</span>
			<b>getSceneContainer</b>()

			</div>
			<div class="description">
				Gets the container for this scene, a DOM div element.
			</div>

			

				
				
				
				
				
					<dl class="detailList">
					<dt class="heading">Returns:</dt>
					
						<dd><span class="light fixedFont">{DOMElement}</span> returns the div container for this scene</dd>
					
					</dl>
				
				
				

			<hr />
		
			<a name="on"> </a>
			<div class="fixedFont">

			
			<b>on</b>(type, callback)

			</div>
			<div class="description">
				Convenience function that will bind a callback to an event type.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{string}</span> <b>type</b>
							
						</dt>
						<dd>the event type to bind</dd>
					
						<dt>
							<span class="light fixedFont">{function}</span> <b>callback</b>
							
						</dt>
						<dd>the function callback to bind to the event</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="removeLayer"> </a>
			<div class="fixedFont">

			
			<b>removeLayer</b>(name)

			</div>
			<div class="description">
				Removes a layer from this scene by name.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{string}</span> <b>name</b>
							
						</dt>
						<dd>the name of the layer to remove</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="setDefaultSize"> </a>
			<div class="fixedFont">

			
			<b>setDefaultSize</b>(width, height)

			</div>
			<div class="description">
				Changes the default size of the scene. This will update all the
default layers sizes too.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{number}</span> <b>width</b>
							
						</dt>
						<dd>the new default width</dd>
					
						<dt>
							<span class="light fixedFont">{number}</span> <b>height</b>
							
						</dt>
						<dd>the new default height</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="update"> </a>
			<div class="fixedFont">

			
			<b>update</b>(elapsed)

			</div>
			<div class="description">
				Updates the layers.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{number}</span> <b>elapsed</b>
							
						</dt>
						<dd>time elapsed since last update call in
milliseconds</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="updateLiveLayers"> </a>
			<div class="fixedFont">

			
			<b>updateLiveLayers</b>()

			</div>
			<div class="description">
				Updates the scene's container with correctly ordered live canvases.
			</div>

			

				
				
				
				
				
				
				

			
		
	

<!-- ============================== event details ========================= -->
	
		<div class="sectionTitle">
			Event Detail
		</div>
		
			<a name="event:click"> </a>
			<div class="fixedFont">

			
			<b>click</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse button is clicked while this scene is active.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:keydown"> </a>
			<div class="fixedFont">

			
			<b>keydown</b>(evt)

			</div>
			<div class="description">
				Event rose when a key is pushed down while this scene is active.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.Event">pulse.Event</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The keyboard event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:keypress"> </a>
			<div class="fixedFont">

			
			<b>keypress</b>(evt)

			</div>
			<div class="description">
				Event rose when a key is pressed while this scene is active.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.Event">pulse.Event</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The keyboard event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:keyup"> </a>
			<div class="fixedFont">

			
			<b>keyup</b>(evt)

			</div>
			<div class="description">
				Event rose when a key is released while this scene is active.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.Event">pulse.Event</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The keyboard event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mousedown"> </a>
			<div class="fixedFont">

			
			<b>mousedown</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse button is pressed down while this scene is active.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mousemove"> </a>
			<div class="fixedFont">

			
			<b>mousemove</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse is moved while this scene is active.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mouseup"> </a>
			<div class="fixedFont">

			
			<b>mouseup</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse button is released while this scene is active.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:mousewheel"> </a>
			<div class="fixedFont">

			
			<b>mousewheel</b>(evt)

			</div>
			<div class="description">
				Event rose when mouse wheel is scrolled while this scene is active.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.MouseEvent">pulse.MouseEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The mouse event.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:touchend"> </a>
			<div class="fixedFont">

			
			<b>touchend</b>(evt)

			</div>
			<div class="description">
				Event rose when the user releases their touch on the node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.TouchEvent">pulse.TouchEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The touch event for dropped node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:touchmove"> </a>
			<div class="fixedFont">

			
			<b>touchmove</b>(evt)

			</div>
			<div class="description">
				Event rose when the user scrolls while tapping on the node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.TouchEvent">pulse.TouchEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The touch event for dropped node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			<hr />
		
			<a name="event:touchstart"> </a>
			<div class="fixedFont">

			
			<b>touchstart</b>(evt)

			</div>
			<div class="description">
				Event rose when the user presses down on the node.
			</div>

			

				
					<dl class="detailList">
					<dt class="heading">Parameters:</dt>
					
						<dt>
							<span class="light fixedFont">{<a href="../symbols/pulse.TouchEvent">pulse.TouchEvent</a>}</span> <b>evt</b>
							
						</dt>
						<dd>The touch event for dropped node.</dd>
					
					</dl>
				
				
				
				
				
				
				

			
		
	
</div>
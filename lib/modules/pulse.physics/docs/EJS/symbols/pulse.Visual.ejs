<div id="docs-content">
<!-- ============================== class title ============================ -->
	<h1 class="classTitle">
		
		Class pulse.Visual
	</h1>

<!-- ============================== class summary ========================== -->
	<p class="description">
		
		

		

		
			<br /><span class="em">Defined in: </span> <a href="https://github.com/onmodulus/pulse/blob/master/lib/modules/pulse.physicssrc/physics.js">/src/physics.js</a>
		
	</p>

<!-- ============================== constructor summary ==================== -->
	
	<table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class pulse.Visual.">
		<caption>Class Summary</caption>
		<thead>
			<tr>
				<th scope="col">Constructor Attributes</th>
				<th scope="col">Constructor Name and Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td class="attributes">&nbsp;</td>
				<td class="nameDescription" >
					<div class="fixedFont">
						<b><a href="../symbols/pulse.Visual#constructor">pulse.Visual</a></b>()
					</div>
					<div class="description">Extends the default pulse.Visual constructor for physics configuration.</div>
				</td>
			</tr>
		</tbody>
	</table>
	

<!-- ============================== properties summary ===================== -->
	

<!-- ============================== methods summary ======================== -->
	
<!-- ============================== events summary ======================== -->
	

<!-- ============================== constructor details ==================== -->
	
	<div class="details"><a name="constructor"> </a>
		<div class="sectionTitle">
			Class Detail
		</div>

		<div class="fixedFont">
				<b>pulse.Visual</b>()
		</div>

		<div class="description">
			Extends the default pulse.Visual constructor for physics configuration.
		</div>

		


			
				<dl class="detailList">
				<dt class="heading">Parameters:</dt>
				
					<dt>
						<span class="light fixedFont">{object}</span>  <b>params.physics</b>
						<i>Optional</i>
					</dt>
						<dd>Physics configuration options.</dd>
				
					<dt>
						<span class="light fixedFont">{boolean}</span>  <b>params.physics.isEnabled</b>
						<i>Optional</i>
					</dt>
						<dd>Whether or not physics are enabled for this node.
Defaults to true.</dd>
				
					<dt>
						<span class="light fixedFont">{boolean}</span>  <b>params.physics.isStatic</b>
						<i>Optional</i>
					</dt>
						<dd>Whether or not this is a static object.  Static
objects are not affected by gravity.  Things do collide with static objects.  This is good
for things like the ground and walls.  Defaults to false.</dd>
				
					<dt>
						<span class="light fixedFont">{string}</span>  <b>params.physics.basicShape</b>
						<i>Optional</i>
					</dt>
						<dd>'circle' or 'box'.  Setting this property 
provides a quick mechanism to set up a physics object.  Custom shapes can be created by
defining a FixtureDef and assigning it to the fixDef.shape param.  Defaults to 'box'.</dd>
				
					<dt>
						<span class="light fixedFont">{Box2D.Dynamics.b2FixtureDef}</span>  <b>params.physics.fixDef</b>
						<i>Optional</i>
					</dt>
						<dd>Provides full control over the 
node's fixture.  The fixture controls properties like friction, restitution, and density.
The fixDef.shape property provides full control over the collision object.  Any value
assigned to the fixDef.shape property will override the basicShape property.</dd>
				
					<dt>
						<span class="light fixedFont">{Box2D.Dynamics.b2FixtureDef}</span>  <b>params.physics.bodyDef</b>
						<i>Optional</i>
					</dt>
						<dd>Custom body definition.</dd>
				
					<dt>
						<span class="light fixedFont">{Box2D.Dynamics.b2World}</span>  <b>params.physics.world</b>
						<i>Optional</i>
					</dt>
						<dd>Custom physics world.</dd>
				
					<dt>
						<span class="light fixedFont">{object}</span>  <b>params.physics.positionOffset</b>
						<i>Optional</i>
					</dt>
						<dd>An adjustment between the physics position
and the resulting visual position.  The x and y properties will be added to the physics
position when being applied to the visual.
By default every visual is added to the global pulse.physics.WORLD.  
This property allows the application to have multiple separate physics worlds.</dd>
				
				</dl>
			
			
			
			
			
			
			

	</div>
	

<!-- ============================== field details ========================== -->
	

<!-- ============================== method details ========================= -->
	

<!-- ============================== event details ========================= -->
	
</div>